Diseño de software

Una vez que se analizan y especifican los requisitos, el diseño es la siguiente actividad técnica a realizar. 

Es un proceso creativo de transformación del problema en una solución, independiente del modelo de procesos que se defina.

El diseño se centra en 4 áreas importantes:
Datos.
Arquitecturas.
Interfaces.
Componentes.

El diseño es la etapa, en la que se fomenta la calidad. 

Sin diseño se corre riesgo de construir un sistema inestable, y difícil de probar.

El diseño deberá implementar todos los requisitos explícitos del modelo de análisis y deberá ajustarse a los requeridos por el cliente. 

El diseño tiene que ser una guía comprensible para los que implemente en software y consencuentemente, los que den soporte al mismo.

Tipos de Diseño

Diseño de datos: 
Transforma el modelo del dominio obtenido del análisis, en estructuras de datos, objetos, relaciones, etc. 

	Por ejemplo un diagrama de entidad relación.

Diseño arquitectónico: 
Define la relación entre los componentes más importantes del software para lograr los requisitos del sistema. 

La información puede derivarse de la especificación, del modelo de análisis y de la interacción de los subsistemas definidos.

Diseño a nivel de componentes: 
Transforma los elementos estructurales de la arquitectura en una descripción procedimental de los componentes del software. 

La información obtenida del diseño de datos, sirven como base.

Diseño de interface:

Describe la forma de comunicación dentro del mismo sistema, con otros sistemas y con las personas. 
	Una interface implica flujo de información (datos o 	control) y comportamiento.

Criterios Técnicos.

Un diseño deberá presentar una estructura arquitectónica que:
Se haya creado mediante patrones de diseño reconocidos.

Que esté formado por componentes que exhiban características de buen diseño.

Un diseño deberá ser modular e independiente. 
	El software deberá dividirse lógicamente en elementos 	que realicen funciones y subfunciones específicas.

Un diseño deberá contener distintas representaciones de datos, arquitectura, interfaces y componentes.

Un diseño deberá conducir a interfaces que reduzcan la complejidad de las conexiones entre módulos y con el entorno externo.
	Debe comunicar de manera eficaz su significado.
  
Principios.

Se deben tener en cuenta enfoques alternativos.

Deberá poderse rastrear hasta el modelo de análisis.

No inventar nada que ya esté inventado.

Minimizar la distancia intelectual entre el software y el problema.

Uniformidad e integración.

Conceptos
•	Abstracción: La noción de abstracción permite concentrarse en un problema a un nivel de generalización sin tener en cuenta los detalles irrelevantes de implementación. Existen 2 tipos de abstracción:
o	Procedimental: Secuencia "nombrada" de instrucciones que tienen una funcionalidad específica. Ej. Una funcion o procedimien
o	De Datos: Colección "nombrada" de datos que definen un objeto real. Por ejemplo, un registro que representa a una persona.
•	Arquitectura: Es la estructura general del software y las formas en que proporciona una integridad conceptual para un sistema.
•	Patrones: Describe una estructura de diseño que resulve un problema de diseño particular dentro de un contexto específico.
•	Modularidad: El software se divide en componentes nombrados y abordados por separado, llamados frecuentemente módulos, que se integran para satisfacer los requisitos del problema.
•	Ocultamiento de información: La información que esta dentro de un módulo no es accesible a otros que no la necesiten. Con esto se mantiene la independencia de los mismos.
•	Independencia Funcional: Se mide mediante cohesión y el acoplamiento entre los módulos. Se busca alta cohesión y bajo acoplamiento.
o	Cohesión (Coherente): Un módulo es altamente cohesivo cuando lleva a cabo solo una tarea dentro del procedimiento y requiere poca interacción con el resto de los procedimientos. De lo contrario, es poco cohesivo cuando realiza tareas muy diferentes o sin relación entre ellas.
o	Tipo de Cohesión:
	Funcional: Cuando las sentencias de un mismo módulo están relacionadas en el desarrollo de una única función (alta cohesión).
	Coincidental (Casual): Cuando las tareas llevadas a cabo no están relacionadas o tienen poca relación (baja cohesión).
	Lógica: Cuando las sentencias se relacionan lógicamente.
	Temporal: Cuando las sentencias deben ejecutarse en el mismo intervalo de tiempo.
	Procedimental: Cuando las sentencias tienen que ejecutarse en un orden específico.
	Comuniacional: Cuando los elementos de procesamiento se centran en los datos de entrada y salida.
	Acoplamiento: Es la medida de interconexión entre los módulos. Existen diferentes niveles de acoplamiento:
	Bajo: Acoplamiento de datos o de marca.
	Moderado: Acoplamiento de control.
	Alto: Acoplamiento común. externo o de contenido.
•	Refinamiento: El refinamiento es un proceso de elaboración. Con la abstracción son conceptos complementarios. La abstracción permite especificar procedimientos y datos sin considerar detalles de grado menor. El refinamiento ayuda a revelar los detalles de grado menor mientras se realiza el diseño.
•	Refactoring: Es una técnica de reorganización que simplifica el diseño de un componente sin cambiar su función o comportamiento. Cuando se refactoriza se busca redudancias, elemenos innecesarios, algoritmos o estructuras de datos que no aplican.

